#!/usr/bin/env ruby

require "beeminder"
require "trollop"

class Beeminder::Goal
  def days_to_lose
    (losedate.to_date - Date.today).to_i
  end
  def goal_time
    (Time.now.to_i - @initday)/(3600*24) + 1
  end
end

class Beeminder::Datapoint
  def date
    timestamp.to_date
  end
end

opts = Trollop::options do
  opt :verbose, "Print subtotal contributions"
end

token = File.read("#{ENV["HOME"]}/.beeminder_auth_token").chomp
goals = Beeminder::User.new(token).goals.select{|g|
  g.days_to_lose >= 0 && g.goal_type == :hustler
}

values_by_day = {}

goals.each do |goal|
  total = goal.curval
  goal.datapoints.each do |d|
    next if d.value == 0
    values_by_day[d.date] ||= {}
    values_by_day[d.date][goal.slug] ||= 0
    values_by_day[d.date][goal.slug] += d.value/total
  end
end

# Scale so it averages to 1/day
# It will simply by goals.size (plus minus some rounding)
total      = values_by_day.values.map(&:values).flatten.sum
start_date = values_by_day.keys.min
end_date   = [Date.today, *values_by_day.keys].max
scale      = (end_date - start_date + 1) / total

(start_date..end_date).each do |d|
  values = values_by_day[d] || {}
  value = values.values.sum * scale
  date = d.strftime("%Y-%m-%d %a")
  details = values.sort_by{|k,v| [-v,k]}.map{|k,v| "%s:%.2f" % [k, v*scale]}.join(" ")

  if opts[:verbose]
    puts "#{ date }  #{ '%.2f' % value }  #{ details }"
  else
    puts "#{ date }  #{ '%.2f' % value }"
  end
end
